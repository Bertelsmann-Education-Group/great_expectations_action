# Allows repo owners to view data docs hosted on netlify for the PR with the command "/data-docs" as a comment in a PR.
name: GE-PR-Demo
on: [issue_comment]

jobs:
  demo-pr:
    if: (github.event.issue.pull_request != null) && contains(github.event.comment.body, '/data-docs')
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    runs-on: ubuntu-latest
    steps:

    - name: Fetch context about the PR that has been commented on
      id: chatops
      uses: actions/github-script@v1
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          // Get the branch name
          github.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.issue.number
          }).then( (pr) => {
            // Get latest SHA of current branch
            var SHA = pr.data.head.ref
            console.log(`::set-output name=SHA::${SHA}`)
          })

    # - name: Fetch context about the PR that has been commented on
    #   id: chatops
    #   uses: machine-learning-apps/actions-chatops@master
    #   with:
    #     TRIGGER_PHRASE: "/data-docs"
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Copy The PR's Branch Repository Contents
      uses: actions/checkout@master
      with:
        ref: ${{ steps.chatops.outputs.SHA }}

    - name: run great expectation checkpoints
      id: ge
      continue-on-error: true
      uses: superconductive/great_expectations_action@master
      with:
        CHECKPOINTS: "passing_checkpoint,failing_checkpoint"

    - name: print location
      run: echo $LOC
      env:
        LOC: ${{ steps.ge.outputs.local_docs_location }}

    - name: deploy data docs to Netlify
      id: netlify
      run: | 
        sudo npm install netlify-cli -g
        netlify deploy --dir $DOCS_LOC | tee _netlify_logs.txt
        
        # Parse URL from logs and send to next step
        DOCS_URL=`cat _netlify_logs.txt | awk '/Draft URL: /{print $4}'`
        ## find out if it is empty or not
        [[  -z "$DOCS_URL" ]] && { echo "Variable DOCS_URL is empty" ; exit 1; }
        echo "::set-output name=docs_url::${DOCS_URL}"
      env:
        DOCS_LOC: ${{ steps.ge.outputs.local_docs_location }}

    - name: Comment on PR
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            var URL = process.env.DOCS_LOC;
            var SHA = process.env.SHA;

            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Great Expectations Data Docs have been generated for SHA: ${SHA} and can be viewed **live** at: ${URL}`
            })
      env:
        DOCS_LOC: ${{ steps.netlify.outputs.docs_url }}
        SHA: ${{ steps.chatops.outputs.SHA }}  
  