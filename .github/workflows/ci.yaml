# How typical users can Great Expectations in their CI workflows
name: GE Checkpoints
on: push

jobs:
  test-hosted-action:
    runs-on: ubuntu-latest
    steps:

    - name: see payload
      run: echo "$PAYLOAD"
      env:
        PAYLOAD: ${{ toJSON(github.event) }}

    - name: Copy Repository Contents
      uses: actions/checkout@master

    - name: Run Great Expectation Checkpoints
      uses: superconductive/great_expectations_action@master
      with:
        CHECKPOINTS: "passing_checkpoint,failing_checkpoint"

    - name: Comment with docs upon failure
      if: ${{ failure() }}
    
    - name: deploy data docs to Netlify
      id: netlify
      run: | 
        sudo npm install netlify-cli -g
        netlify deploy --dir $DOCS_LOC | tee _netlify_logs.txt
        
        # Parse URL from logs and send to next step
        DOCS_URL=`cat _netlify_logs.txt | awk '/Draft URL: /{print $4}'`
        ## find out if it is empty or not
        [[  -z "$DOCS_URL" ]] && { echo "Variable DOCS_URL is empty" ; exit 1; }
        echo "::set-output name=docs_url::${DOCS_URL}"
      env:
        DOCS_LOC: ${{ steps.ge.outputs.local_docs_location }}

    - name: Comment on PR
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            var URL = process.env.DOCS_LOC;
            var SHA = process.env.SHA;

            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Failed Great Expectations Checkpoints Detected For: ${SHA}.  Corresponding Data Docs have been generated and can be viewed [here](${URL}).`
            })
      env:
        DOCS_LOC: ${{ steps.netlify.outputs.docs_url }}
        SHA: ${{ steps.chatops.outputs.SHA }}
